const canvasDotsBg = function () {
    let e = document.querySelector(".canvas-2"),
      t = e.getContext("2d"),
      r = [
        "rgb(81, 162, 233)",
        "rgb(81, 162, 233)",
        "rgb(81, 162, 233)",
        "rgb(255, 77, 90)",
      ];
    (e.width = document.body.scrollWidth),
      (e.height = window.innerHeight),
      (e.style.display = "block"),
      (t.lineWidth = 0.3),
      (t.strokeStyle = "rgb(81, 162, 233)");
    let i = { x: (30 * e.width) / 100, y: (30 * e.height) / 100 },
      a = window.innerWidth,
      s;
    function n() {
      (this.x = Math.random() * e.width),
        (this.y = Math.random() * e.height),
        (this.vx = -0.5 + Math.random()),
        (this.vy = -0.5 + Math.random()),
        (this.radius = 1.5 * Math.random()),
        (this.colour = r[Math.floor(Math.random() * r.length)]);
    }
    a > 1600
      ? (s = { nb: 100, distance: 0, d_radius: 0, array: [] })
      : a > 1300
      ? (s = { nb: 75, distance: 0, d_radius: 0, array: [] })
      : a > 1100
      ? (s = { nb: 50, distance: 0, d_radius: 0, array: [] })
      : ((s = { nb: 1, distance: 0, d_radius: 0, array: [] }),
        (t.globalAlpha = 0)),
      (n.prototype = {
        create: function () {
          t.beginPath(), t.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, !1);
          let e =
              (window.pageYOffset || document.scrollTop) -
              (document.clientTop || 0),
            r = ((this.x - i.x) ** 2 + (this.y - i.y + e) ** 2) ** 0.5;
          (t.fillStyle = this.colour.slice(0, -1) + `,${1 - r / (a / 2)})`),
            t.fill();
        },
        animate: function () {
          for (let t = 1; t < s.nb; t++) {
            let r = s.array[t];
            r.y < 0 || r.y > e.height
              ? ((r.vx = r.vx), (r.vy = -r.vy))
              : (r.x < 0 || r.x > e.width) && ((r.vx = -r.vx), (r.vy = r.vy)),
              (r.x += r.vx),
              (r.y += r.vy);
          }
        },
        line: function () {
          for (let e = 0; e < s.nb; e++)
            for (let r = 0; r < s.nb; r++) {
              let a = s.array[e],
                n = s.array[r];
              if (
                a.x - n.x < s.distance &&
                a.y - n.y < s.distance &&
                a.x - n.x > -s.distance &&
                a.y - n.y > -s.distance &&
                a.x - i.x < s.d_radius &&
                a.y - i.y < s.d_radius &&
                a.x - i.x > -s.d_radius &&
                a.y - i.y > -s.d_radius
              ) {
                t.beginPath(), t.moveTo(a.x, a.y), t.lineTo(n.x, n.y);
                let o = ((a.x - i.x) ** 2 + (a.y - i.y) ** 2) ** 0.5,
                  l = o / s.d_radius;
                (l -= 0.3) < 0 && (l = 0),
                  (t.strokeStyle = `rgb(81, 162, 233, ${1 - l})`),
                  t.stroke(),
                  t.closePath();
              }
            }
        },
      }),
      (window.onscroll = function (e) {
        (i.x = window.innerWidth / 2), (i.y = window.innerHeight / 2);
        let t =
          (window.pageYOffset || document.scrollTop) -
          (document.clientTop || 0);
        i.y += t;
      });
    let o = setInterval(function r() {
      t.clearRect(0, 0, e.width, e.height);
      for (let i = 0; i < s.nb; i++) {
        s.array.push(new n());
        var a = s.array[i];
        a.create();
      }
      (s.array[0].radius = 1.5), (s.array[0].colour = "#51a2e9"), a.animate();
    }, 1e3 / 30);
    window.onresize = function () {
      clearInterval(o), canvasDotsBg();
    };
  },
  canvasDots = function () {
    let e = document.querySelector("canvas"),
      t = e.getContext("2d"),
      r = [
        "rgb(81, 162, 233)",
        "rgb(81, 162, 233)",
        "rgb(81, 162, 233)",
        "rgb(81, 162, 233)",
        "rgb(255, 77, 90)",
      ];
    (e.width = document.body.scrollWidth),
      (e.height = window.innerHeight),
      (e.style.display = "block"),
      (t.lineWidth = 0.3),
      (t.strokeStyle = "rgb(81, 162, 233)");
    let i = { x: (30 * e.width) / 100, y: (30 * e.height) / 100 },
      a = window.innerWidth,
      s;
    function n() {
      (this.x = Math.random() * e.width),
        (this.y = Math.random() * e.height),
        (this.vx = -0.5 + Math.random()),
        (this.vy = -0.5 + Math.random()),
        (this.radius = 1.5 * Math.random()),
        (this.colour = r[Math.floor(Math.random() * r.length)]);
    }
    (s =
      a > 1600
        ? { nb: 600, distance: 70, d_radius: 300, array: [] }
        : a > 1300
        ? { nb: 575, distance: 60, d_radius: 280, array: [] }
        : a > 1100
        ? { nb: 500, distance: 55, d_radius: 250, array: [] }
        : a > 800
        ? { nb: 300, distance: 0, d_radius: 0, array: [] }
        : a > 600
        ? { nb: 200, distance: 0, d_radius: 0, array: [] }
        : { nb: 100, distance: 0, d_radius: 0, array: [] }),
      (n.prototype = {
        create: function () {
          t.beginPath(), t.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, !1);
          let e = ((this.x - i.x) ** 2 + (this.y - i.y) ** 2) ** 0.5;
          (t.fillStyle = this.colour.slice(0, -1) + `,${1 - e / (a / 1.7)})`),
            t.fill();
        },
        animate: function () {
          for (let t = 1; t < s.nb; t++) {
            let r = s.array[t];
            r.y < 0 || r.y > e.height
              ? ((r.vx = r.vx), (r.vy = -r.vy))
              : (r.x < 0 || r.x > e.width) && ((r.vx = -r.vx), (r.vy = r.vy)),
              (r.x += r.vx),
              (r.y += r.vy);
          }
        },
        line: function () {
          for (let e = 0; e < s.nb; e++)
            for (let r = 0; r < s.nb; r++) {
              let a = s.array[e],
                n = s.array[r];
              if (
                a.x - n.x < s.distance &&
                a.y - n.y < s.distance &&
                a.x - n.x > -s.distance &&
                a.y - n.y > -s.distance &&
                a.x - i.x < s.d_radius &&
                a.y - i.y < s.d_radius &&
                a.x - i.x > -s.d_radius &&
                a.y - i.y > -s.d_radius
              ) {
                t.beginPath(), t.moveTo(a.x, a.y), t.lineTo(n.x, n.y);
                let o = ((a.x - i.x) ** 2 + (a.y - i.y) ** 2) ** 0.5,
                  l = o / s.d_radius;
                (l -= 0.3) < 0 && (l = 0),
                  (t.strokeStyle = `rgb(81, 162, 233, ${1 - l})`),
                  t.closePath();
              }
            }
        },
      }),
      (window.onmousemove = function (e) {
        (i.x = e.pageX), (i.y = e.pageY);
        try {
          (s.array[0].x = e.pageX), (s.array[0].y = e.pageY);
        } catch {}
      }),
      (i.x = window.innerWidth / 2),
      (i.y = window.innerHeight / 2);
    let o = setInterval(function r() {
      t.clearRect(0, 0, e.width, e.height);
      for (let i = 0; i < s.nb; i++) {
        s.array.push(new n());
        var a = s.array[i];
        a.create();
      }
      (s.array[0].radius = 1.5),
        (s.array[0].colour = "#51a2e9"),
        a.line(),
        a.animate();
    }, 1e3 / 30);
    window.onresize = function () {
      clearInterval(o), canvasDots();
    };
  };
function aboutFadeIn(e, t) {
  e.forEach((e) => {
    if (e.isIntersecting && document.body.scrollWidth > 1300) {
      document.querySelector(".profile").classList.add("profile__fade-in");
      let t = (e) => new Promise((t) => setTimeout(t, e));
      t(1e3).then(() => {
        document
          .querySelector(".skills__item--python")
          .classList.add("skills__item-fade-in");
      }),
        t(1100).then(() => {
          document
            .querySelector(".skills__item--csharp")
            .classList.add("skills__item-fade-in");
        }),
        t(1200).then(() => {
          document
            .querySelector(".skills__item--js")
            .classList.add("skills__item-fade-in");
        }),
        t(1300).then(() => {
          document
            .querySelector(".skills__item--git")
            .classList.add("skills__item-fade-in");
        }),
        t(1400).then(() => {
          document
            .querySelector(".skills__item--react")
            .classList.add("skills__item-fade-in");
        }),
        t(1500).then(() => {
          document
            .querySelector(".skills__item--blazor")
            .classList.add("skills__item-fade-in");
        }),
        t(1600).then(() => {
          document
            .querySelector(".skills__item--postgres")
            .classList.add("skills__item-fade-in");
        }),
        t(1700).then(() => {
          document
            .querySelector(".skills__item--c")
            .classList.add("skills__item-fade-in");
        }),
        t(1800).then(() => {
          document
            .querySelector(".skills__item--linux")
            .classList.add("skills__item-fade-in");
        }),
        t(1900).then(() => {
          document
            .querySelector(".skills__item--html")
            .classList.add("skills__item-fade-in");
        }),
        document
          .querySelector(".projects-grid")
          .classList.add("projects-grid__fade-in");
    }
  });
}
window.onload = function () {
  canvasDotsBg(), canvasDots();
};
let options = { root: null, rootMargin: "0px", threshold: 0.5 },
  options2 = { root: null, rootMargin: "0px", threshold: 0.2 },
  observer = new IntersectionObserver(aboutFadeIn, options);
observer.observe(document.querySelector(".about__content"));
const navLinks = document.querySelectorAll(".navigation__item");
function navFadeIn(e, t) {
  e.forEach((e) => {
    e.isIntersecting &&
      (navLinks.forEach((e) => {
        e.classList.remove("navigation__item--active");
      }),
      document
        .querySelector(`#nav-${e.target.id}`)
        .classList.add("navigation__item--active"));
  });
}
function navFadeInProjects(e, t) {
  e.forEach((e) => {
    e.isIntersecting &&
      (navLinks.forEach((e) => {
        e.classList.remove("navigation__item--active");
      }),
      document
        .querySelector(`#nav-${e.target.id}`)
        .classList.add("navigation__item--active"));
  });
}
let observerNav = new IntersectionObserver(navFadeIn, options);
observerNav.observe(document.querySelector("#hero")),
  observerNav.observe(document.querySelector("#about")),
  observerNav.observe(document.querySelector("#contact"));
let observerNavProjects = new IntersectionObserver(navFadeInProjects, options2);
observerNavProjects.observe(document.querySelector("#projects"));
const re =
  /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
document.querySelector("#form-submit").addEventListener("click", () => {
  let e = document.querySelector(".contact__form-name"),
    t = document.querySelector(".contact__form-email"),
    r = document.querySelector(".contact__form-message"),
    i = e.value,
    a = t.value,
    s = r.value,
    n = document.querySelector(".form-error__name"),
    o = document.querySelector(".form-error__email"),
    l = document.querySelector(".form-error__msg"),
    c = !1,
    d = !1,
    $ = !1;
  if (
    (i
      ? ((c = !0),
        e.classList.remove("input-error"),
        (n.style.display = "none"))
      : ((c = !1), e.classList.add("input-error"), (n.style.display = "block")),
    a.match(re)
      ? ((d = !0),
        t.classList.remove("input-error"),
        (o.style.display = "none"))
      : ((d = !1), t.classList.add("input-error"), (o.style.display = "block")),
    s
      ? (($ = !0),
        r.classList.remove("input-error"),
        (l.style.display = "none"))
      : (($ = !1), r.classList.add("input-error"), (l.style.display = "block")),
    c && d && $)
  ) {
    document.querySelector(".contact__form").submit();
    let y = (e) => new Promise((t) => setTimeout(t, e));
    y(1500).then(() => {
      document.querySelector(".contact__form").reset();
    });
  }
});
